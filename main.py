# main.py
import os
import logging
import asyncio
from telegram import Update
from telegram.ext import Application, ContextTypes, MessageHandler, filters
import requests
from io import BytesIO
from PIL import Image
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
HF_API_TOKEN = os.getenv("HF_API_TOKEN")
PORT = int(os.environ.get("PORT", 8443))

if not TELEGRAM_TOKEN or not HF_API_TOKEN:
    raise ValueError("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ HF_API_TOKEN")

# –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞
WORKING_MODELS = [
    "runwayml/stable-diffusion-v1-5",  # –ë–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
    "prompthero/openjourney-v4",       # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å
    "wavymulder/Analog-Diffusion",     # –ï—â–µ –æ–¥–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
]

async def generate_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
    
    prompt = update.message.text
    user_id = update.effective_user.id
    
    try:
        logger.info(f"User {user_id} requested: {prompt}")
        await update.message.reply_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... (—ç—Ç–æ –∑–∞–π–º–µ—Ç 20-60 —Å–µ–∫—É–Ω–¥)")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏
        for model_index, model in enumerate(WORKING_MODELS):
            try:
                logger.info(f"Trying model: {model}")
                
                response = requests.post(
                    f"https://api-inference.huggingface.co/models/{model}",
                    headers={"Authorization": f"Bearer {HF_API_TOKEN}"},
                    json={
                        "inputs": prompt,
                        "options": {
                            "wait_for_model": True,
                            "use_cache": False
                        }
                    },
                    timeout=120
                )
                
                logger.info(f"Model {model} - Status: {response.status_code}")
                
                if response.status_code == 200:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    if len(response.content) < 1000:  # –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –æ—Ç–≤–µ—Ç - –≤–µ—Ä–æ—è—Ç–Ω–æ –æ—à–∏–±–∫–∞
                        error_text = response.text[:200] if response.text else "Empty response"
                        logger.warning(f"Model {model} returned small response: {error_text}")
                        continue
                    
                    try:
                        image = Image.open(BytesIO(response.content))
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–µ
                        image.verify()
                        
                        # –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                        image = Image.open(BytesIO(response.content))
                        
                        bio = BytesIO()
                        bio.name = 'image.png'
                        image.save(bio, 'PNG')
                        bio.seek(0)
                        
                        await update.message.reply_photo(
                            photo=bio, 
                            caption=f"üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{prompt}'\n–ú–æ–¥–µ–ª—å: {model.split('/')[-1]}"
                        )
                        logger.info(f"‚úÖ Image sent to user {user_id} using {model}")
                        return
                        
                    except Exception as img_error:
                        logger.warning(f"Invalid image from {model}: {img_error}")
                        continue
                
                elif response.status_code == 503:
                    # –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
                    if model_index < len(WORKING_MODELS) - 1:
                        logger.info(f"Model {model} is loading, trying next model...")
                        continue
                    else:
                        raise Exception("–í—Å–µ –º–æ–¥–µ–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã.")
                
                elif response.status_code == 404:
                    logger.warning(f"Model {model} not found (404), trying next...")
                    continue
                    
                else:
                    # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ API
                    try:
                        error_data = response.json()
                        error_msg = error_data.get('error', 'Unknown error')
                    except:
                        error_msg = response.text[:500] if response.text else f'Status {response.status_code}'
                    
                    logger.warning(f"Model {model} error: {error_msg}")
                    continue
                    
            except requests.exceptions.Timeout:
                logger.warning(f"Model {model} timeout, trying next...")
                continue
            except Exception as model_error:
                logger.warning(f"Model {model} failed: {model_error}")
                continue
        
        # –ï—Å–ª–∏ –≤—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
        raise Exception(
            "üòî –í—Å–µ –º–æ–¥–µ–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è (–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã)\n"  
            "‚Ä¢ –°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å\n"
            "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å API\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 'a cat', 'sunset', 'flower'"
        )
        
    except Exception as e:
        error_msg = f"‚ùå {str(e)}"
        await update.message.reply_text(error_msg[:1000])
        logger.error(f"Error for user {user_id}: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å!\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ 'a cute cat'\n" 
        "‚Ä¢ 'beautiful sunset'\n"
        "‚Ä¢ 'colorful flowers'\n\n"
        "–õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å:\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.\n"
        "–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –∏–ª–∏ —É–ø—Ä–æ—Å—Ç–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
    )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Exception while handling an update: {context.error}")

def main():
    try:
        # –°–æ–∑–¥–∞—ë–º Application
        app = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, generate_image))
        app.add_handler(MessageHandler(filters.COMMAND & filters.Regex("start"), start))
        app.add_handler(MessageHandler(filters.COMMAND & filters.Regex("help"), help_command))
        app.add_error_handler(error_handler)
        
        # –ó–∞–ø—É—Å–∫ –Ω–∞ Render
        RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")
        
        if RENDER_EXTERNAL_URL:
            # Webhook —Ä–µ–∂–∏–º –¥–ª—è Render
            webhook_url = f"{RENDER_EXTERNAL_URL}/webhook"
            logger.info(f"Starting webhook on port {PORT} with URL: {webhook_url}")
            
            app.run_webhook(
                listen="0.0.0.0",
                port=PORT,
                webhook_url=webhook_url,
                url_path="/webhook",
                secret_token=None
            )
        else:
            # Polling —Ä–µ–∂–∏–º –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            logger.info("Starting polling...")
            app.run_polling()
            
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
        raise

if __name__ == "__main__":
    main()
