# main.py
import os
import logging
import asyncio
from telegram import Update
from telegram.ext import Application, ContextTypes, MessageHandler, filters
import requests
from io import BytesIO
from PIL import Image
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
HF_API_TOKEN = os.getenv("HF_API_TOKEN")
PORT = int(os.environ.get("PORT", 8443))

if not TELEGRAM_TOKEN or not HF_API_TOKEN:
    raise ValueError("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ HF_API_TOKEN")

async def generate_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
    
    prompt = update.message.text
    user_id = update.effective_user.id
    
    try:
        logger.info(f"User {user_id} requested: {prompt}")
        await update.message.reply_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... (—ç—Ç–æ –∑–∞–π–º–µ—Ç 20-60 —Å–µ–∫—É–Ω–¥)")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
        max_retries = 3
        for attempt in range(max_retries):
            try:
                response = requests.post(
                    "https://api-inference.huggingface.co/models/stabilityai/stable-diffusion-2-1",
                    headers={"Authorization": f"Bearer {HF_API_TOKEN}"},
                    json={"inputs": prompt},
                    timeout=120
                )
                
                logger.info(f"HF API response status: {response.status_code}")
                
                if response.status_code == 200:
                    # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
                    image = Image.open(BytesIO(response.content))
                    bio = BytesIO()
                    bio.name = 'image.png'
                    image.save(bio, 'PNG')
                    bio.seek(0)
                    
                    await update.message.reply_photo(photo=bio, caption=f"üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{prompt}'")
                    logger.info(f"Image sent to user {user_id}")
                    return
                    
                elif response.status_code == 503:
                    # –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
                    if attempt < max_retries - 1:
                        wait_time = 30 * (attempt + 1)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                        logger.info(f"Model is loading, waiting {wait_time} seconds...")
                        await update.message.reply_text(f"‚è≥ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è... –ñ–¥—É {wait_time} —Å–µ–∫—É–Ω–¥")
                        await asyncio.sleep(wait_time)
                        continue
                    else:
                        raise Exception("–ú–æ–¥–µ–ª—å –≤—Å–µ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
                else:
                    # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ API
                    try:
                        error_data = response.json()
                        error_msg = error_data.get('error', 'Unknown error')
                    except:
                        error_msg = response.text[:500] if response.text else 'Empty response'
                    
                    raise Exception(f"HuggingFace API error {response.status_code}: {error_msg}")
                    
            except requests.exceptions.Timeout:
                if attempt < max_retries - 1:
                    await update.message.reply_text("‚è≥ –¢–∞–π–º–∞—É—Ç, –ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞...")
                    continue
                else:
                    raise Exception("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        # –û–±—Ä–µ–∑–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        if len(error_msg) > 1000:
            error_msg = error_msg[:1000] + "..."
        await update.message.reply_text(error_msg)
        logger.error(f"Error for user {user_id}: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å!\n\n"
        "–ü—Ä–∏–º–µ—Ä: '–∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –º–æ—Ä–µ–º'"
    )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Exception while handling an update: {context.error}")

def main():
    try:
        # –°–æ–∑–¥–∞—ë–º Application
        app = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, generate_image))
        app.add_handler(MessageHandler(filters.COMMAND & filters.Regex("start"), start))
        app.add_error_handler(error_handler)
        
        # –ó–∞–ø—É—Å–∫ –Ω–∞ Render
        RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")
        
        if RENDER_EXTERNAL_URL:
            # Webhook —Ä–µ–∂–∏–º –¥–ª—è Render
            webhook_url = f"{RENDER_EXTERNAL_URL}/webhook"
            logger.info(f"Starting webhook on port {PORT} with URL: {webhook_url}")
            
            app.run_webhook(
                listen="0.0.0.0",
                port=PORT,
                webhook_url=webhook_url,
                url_path="/webhook",
                secret_token=None
            )
        else:
            # Polling —Ä–µ–∂–∏–º –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            logger.info("Starting polling...")
            app.run_polling()
            
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
        raise

if __name__ == "__main__":
    main()
