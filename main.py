# main.py
import os
from telegram import Update
from telegram.ext import Application, ContextTypes, MessageHandler, filters
import requests
from io import BytesIO
from PIL import Image
import google.generativeai as genai

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
HF_API_TOKEN = os.getenv("HF_API_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")  # ‚Üê –ù–û–í–ê–Ø –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è!
PORT = int(os.environ.get("PORT", 8443))

if not TELEGRAM_TOKEN or not HF_API_TOKEN or not GEMINI_API_KEY:
    raise ValueError("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN, HF_API_TOKEN –∏–ª–∏ GEMINI_API_KEY")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini ===
genai.configure(api_key=GEMINI_API_KEY)
# –°–æ–∑–¥–∞—ë–º –º–æ–¥–µ–ª—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–∞—Ç–∞
model = genai.GenerativeModel("gemini-1.5-flash")  # –∏–ª–∏ "gemini-1.0-pro"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —á–∞—Ç–æ–≤ (–≤ –ø–∞–º—è—Ç–∏)
user_chats = {}

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (Hugging Face) ===
async def generate_image_from_prompt(update: Update, prompt: str):
    try:
        await update.message.reply_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        response = requests.post(
            "https://api-inference.huggingface.co/models/stabilityai/stable-diffusion-2-1",
            headers={"Authorization": f"Bearer {HF_API_TOKEN}"},
            json={"inputs": prompt},
            timeout=60
        )
        if response.status_code != 200:
            raise Exception(f"HF error {response.status_code}")
        image = Image.open(BytesIO(response.content))
        bio = BytesIO()
        bio.name = 'image.png'
        image.save(bio, 'PNG')
        bio.seek(0)
        await update.message.reply_photo(photo=bio)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)[:150]}")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.strip()

    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if text.startswith("/img "):
        return await generate_image_from_prompt(update, text[5:].strip())

    # –î–∏–∞–ª–æ–≥ —Å Gemini
    try:
        await update.message.reply_text("üí¨ –î—É–º–∞—é...")
        
        # –°–æ–∑–¥–∞—ë–º —á–∞—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
        if user_id not in user_chats:
            user_chats[user_id] = model.start_chat(history=[])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = user_chats[user_id].send_message(text)
        reply = response.text
        await update.message.reply_text(reply)

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ Gemini: {str(e)[:150]}")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
app = Application.builder().token(TELEGRAM_TOKEN).build()
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

if __name__ == "__main__":
    RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")
    if RENDER_EXTERNAL_URL:
        webhook_url = f"{RENDER_EXTERNAL_URL}/webhook"
        app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            webhook_url=webhook_url
        )
    else:
        app.run_polling()
