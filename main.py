# main.py
from flask import Flask, request, jsonify
import os
from telegram import Bot, Update
from telegram.ext import Application, ContextTypes, MessageHandler, filters
import requests
from io import BytesIO
from PIL import Image

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
HF_API_TOKEN = os.getenv("HF_API_TOKEN")
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")  # –ù–∞–ø—Ä–∏–º–µ—Ä: https://telegram-image-bot-fg24.onrender.com

if not TELEGRAM_TOKEN or not HF_API_TOKEN or not RENDER_EXTERNAL_URL:
    raise ValueError("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN, HF_API_TOKEN –∏–ª–∏ RENDER_EXTERNAL_URL")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Application (–±–µ–∑ –∑–∞–ø—É—Å–∫–∞) ===
application = Application.builder().token(TELEGRAM_TOKEN).build()

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def generate_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
    prompt = update.message.text
    await update.message.reply_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... (20‚Äì60 —Å–µ–∫)")
    try:
        # –ó–∞–ø—Ä–æ—Å –∫ Hugging Face
        response = requests.post(
            "https://api-inference.huggingface.co/models/stabilityai/stable-diffusion-2-1",
            headers={"Authorization": f"Bearer {HF_API_TOKEN}"},
            json={"inputs": prompt}
        )
        if response.status_code != 200:
            raise Exception(f"HF error {response.status_code}")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image = Image.open(BytesIO(response.content))
        bio = BytesIO()
        bio.name = 'image.png'
        image.save(bio, 'PNG')
        bio.seek(0)
        await update.message.reply_photo(photo=bio)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:150]}")

application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, generate_image))

# === Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
app = Flask(__name__)

@app.route("/")
def home():
    return "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"

@app.route("/setwebhook")
def set_webhook():
    webhook_url = f"{RENDER_EXTERNAL_URL}/webhook"
    bot = Bot(token=TELEGRAM_TOKEN)
    success = bot.set_webhook(url=webhook_url)
    return f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {success}<br>URL: {webhook_url}"

@app.route("/webhook", methods=["POST"])
def webhook():
    json_data = request.get_json()
    if json_data:
        update = Update.de_json(json_data, application.bot)
        application.update_queue.put(update)
    return jsonify({"ok": True})

# === –ó–∞–ø—É—Å–∫ Flask ===
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
