# main.py
import os
import logging
from telegram import Update
from telegram.ext import Application, ContextTypes, MessageHandler, filters
import requests
from io import BytesIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
STABILITY_API_KEY = os.getenv("STABILITY_API_KEY")
PORT = int(os.environ.get("PORT", 8443))

if not TELEGRAM_TOKEN:
    raise ValueError("‚ùå –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN")

async def generate_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Stability AI"""
    if not update.message or not update.message.text:
        return
    
    prompt = update.message.text
    user_id = update.effective_user.id
    
    try:
        logger.info(f"User {user_id} requested: {prompt}")
        
        if not STABILITY_API_KEY:
            await update.message.reply_text(
                "‚ùå STABILITY_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.\n\n"
                "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á:\n"
                "1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ platform.stability.ai\n"
                "2. –í Dashboard –Ω–∞–π–¥–∏—Ç–µ API Keys\n"
                "3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Render –∫–∞–∫ STABILITY_API_KEY"
            )
            return
        
        await update.message.reply_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... (10-20 —Å–µ–∫—É–Ω–¥)")
        
        # Stability AI API
        response = requests.post(
            "https://api.stability.ai/v2beta/stable-image/generate/core",
            headers={
                "Authorization": f"Bearer {STABILITY_API_KEY}",
                "Accept": "image/*"
            },
            files={"none": ''},  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            data={
                "prompt": prompt,
                "output_format": "png",
            },
            timeout=60
        )
        
        logger.info(f"Stability AI response status: {response.status_code}")
        
        if response.status_code == 200:
            # –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            bio = BytesIO(response.content)
            bio.name = 'image.png'
            
            await update.message.reply_photo(
                photo=bio,
                caption=f"üé® '{prompt}'\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ Stability AI"
            )
            logger.info(f"‚úÖ Image successfully sent to user {user_id}")
            
        elif response.status_code == 402:
            await update.message.reply_text(
                "‚ùå –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω.\n\n"
                "–†–µ—à–µ–Ω–∏–µ:\n"
                "‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ platform.stability.ai\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –≤ Dashboard\n"
                "‚Ä¢ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á—ë—Ç"
            )
        elif response.status_code == 401:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π Stability AI API –∫–ª—é—á.\n\n"
                "–†–µ—à–µ–Ω–∏–µ:\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ STABILITY_API_KEY –≤ Render\n"
                "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∫–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é\n"
                "‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π API –∫–ª—é—á –Ω–∞ platform.stability.ai"
            )
        elif response.status_code == 429:
            await update.message.reply_text(
                "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤.\n\n"
                "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
        else:
            error_text = response.text[:500] if response.text else "Unknown error"
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status_code}\n"
                f"–î–µ—Ç–∞–ª–∏: {error_text}"
            )
        
    except requests.exceptions.Timeout:
        await update.message.reply_text(
            "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —É–ø—Ä–æ—Å—Ç–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
        )
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        await update.message.reply_text(error_msg[:1000])
        logger.error(f"Error for user {user_id}: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    if STABILITY_API_KEY:
        status = "‚úÖ Stability AI –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else:
        status = "‚ùå STABILITY_API_KEY –Ω–µ –∑–∞–¥–∞–Ω"
    
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Stability AI.\n\n"
        f"{status}\n\n"
        f"üìù –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ!\n\n"
        f"üìå –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
        f"‚Ä¢ 'a cute cat wearing hat'\n"
        f"‚Ä¢ 'beautiful sunset over mountains'\n"
        f"‚Ä¢ 'colorful flowers in garden'\n"
        f"‚Ä¢ 'cyberpunk city at night'\n\n"
        f"‚ö° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç 10-20 —Å–µ–∫—É–Ω–¥"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    await update.message.reply_text(
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ\n"
        "‚è±Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç 10-20 —Å–µ–∫—É–Ω–¥\n"
        "üñºÔ∏è –ë–æ—Ç –≤–µ—Ä–Ω—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n\n"
        "üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –¥–µ—Ç–∞–ª–∏ (—Ü–≤–µ—Ç–∞, —Å—Ç–∏–ª—å, —Ñ–æ–Ω)\n"
        "‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
        "üõ†Ô∏è –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å API"
    )

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /status - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API"""
    if not STABILITY_API_KEY:
        await update.message.reply_text("‚ùå STABILITY_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")
        return
    
    try:
        await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å Stability AI API...")
        
        response = requests.post(
            "https://api.stability.ai/v2beta/stable-image/generate/core",
            headers={"Authorization": f"Bearer {STABILITY_API_KEY}"},
            files={"none": ''},
            data={"prompt": "test", "output_format": "png"},
            timeout=15
        )
        
        if response.status_code in [200, 400]:  # 400 - –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞ –±–µ–∑ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
            await update.message.reply_text(
                "‚úÖ Stability AI API –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n"
                "üìä –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n"
                "‚ö° –ì–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
            )
        else:
            await update.message.reply_text(
                f"‚ùì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å API: {response.status_code}\n"
                f"–û—Ç–≤–µ—Ç: {response.text[:200]}"
            )
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞—ë–º Application
        app = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, generate_image))
        app.add_handler(MessageHandler(filters.COMMAND & filters.Regex("start"), start))
        app.add_handler(MessageHandler(filters.COMMAND & filters.Regex("help"), help_command))
        app.add_handler(MessageHandler(filters.COMMAND & filters.Regex("status"), status_command))
        app.add_error_handler(error_handler)
        
        # –ó–∞–ø—É—Å–∫ –Ω–∞ Render
        RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")
        
        if RENDER_EXTERNAL_URL:
            # Webhook —Ä–µ–∂–∏–º –¥–ª—è Render
            webhook_url = f"{RENDER_EXTERNAL_URL}/webhook"
            logger.info(f"üöÄ Starting Stability AI Bot on port {PORT}")
            logger.info(f"üåê Webhook URL: {webhook_url}")
            
            app.run_webhook(
                listen="0.0.0.0",
                port=PORT,
                webhook_url=webhook_url,
                url_path="/webhook",
                secret_token=None
            )
        else:
            # Polling —Ä–µ–∂–∏–º –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            logger.info("üîÑ Starting polling...")
            app.run_polling()
            
    except Exception as e:
        logger.error(f"‚ùå Failed to start bot: {e}")
        raise

if __name__ == "__main__":
    main()
