# main.py
from flask import Flask, request, jsonify
import os
from telegram import Bot, Update
from telegram.ext import Application, ContextTypes, MessageHandler, filters
import requests
from io import BytesIO
from PIL import Image
import threading

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
HF_API_TOKEN = os.getenv("HF_API_TOKEN")
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")

if not TELEGRAM_TOKEN or not HF_API_TOKEN or not RENDER_EXTERNAL_URL:
    raise ValueError("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN, HF_API_TOKEN –∏–ª–∏ RENDER_EXTERNAL_URL")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Application ===
application = Application.builder().token(TELEGRAM_TOKEN).build()

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ===
async def generate_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
    prompt = update.message.text
    try:
        await update.message.reply_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... (20‚Äì60 —Å–µ–∫)")
        
        # –ó–∞–ø—Ä–æ—Å –∫ Hugging Face
        response = requests.post(
            "https://api-inference.huggingface.co/models/stabilityai/stable-diffusion-2-1",
            headers={"Authorization": f"Bearer {HF_API_TOKEN}"},
            json={"inputs": prompt},
            timeout=60
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"[HF] Status: {response.status_code}")
        if response.status_code != 200:
            error_detail = response.text[:300]
            print(f"[HF] Error: {error_detail}")
            raise Exception(f"HF error {response.status_code}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image = Image.open(BytesIO(response.content))
        bio = BytesIO()
        bio.name = 'image.png'
        image.save(bio, 'PNG')
        bio.seek(0)
        await update.message.reply_photo(photo=bio)

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:150]}"
        print(f"[BOT ERROR] {error_msg}")
        try:
            await update.message.reply_text(error_msg)
        except:
            pass

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, generate_image))

# === Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
app = Flask(__name__)

@app.route("/")
def home():
    return "‚úÖ Telegram Image Bot is running!"

@app.route("/setwebhook")
def set_webhook():
    webhook_url = f"{RENDER_EXTERNAL_URL}/webhook"
    bot = Bot(token=TELEGRAM_TOKEN)
    import asyncio
    success = asyncio.run(bot.set_webhook(url=webhook_url))
    return f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {success}<br>URL: {webhook_url}"

# –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ
def start_app():
    application.run_polling()

@app.route("/webhook", methods=["POST"])
def webhook():
    json_data = request.get_json()
    if json_
        update = Update.de_json(json_data, application.bot)
        application.update_queue.put(update)
    return jsonify({"ok": True})

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
thread = threading.Thread(target=start_app)
thread.daemon = True
thread.start()

# === –ó–∞–ø—É—Å–∫ Flask ===
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
