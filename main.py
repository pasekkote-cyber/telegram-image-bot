# main.py
import os
from telegram import Update
from telegram.ext import Application, ContextTypes, MessageHandler, filters
import google.generativeai as genai

# === –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ===
if not TELEGRAM_TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
if not GEMINI_API_KEY:
    raise ValueError("‚ùå GEMINI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")
if not RENDER_EXTERNAL_URL:
    raise ValueError("‚ùå RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini ===
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-1.5-flash")

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ —á–∞—Ç–æ–≤ (–≤ –ø–∞–º—è—Ç–∏) ===
user_chats = {}

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —á–∞—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    if user_id not in user_chats:
        user_chats[user_id] = model.start_chat(history=[])

    try:
        await update.message.reply_text("üí¨ –î—É–º–∞—é...")
        response = user_chats[user_id].send_message(text)
        await update.message.reply_text(response.text)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:150]}")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram-–±–æ—Ç–∞ ===
app = Application.builder().token(TELEGRAM_TOKEN).build()
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# === –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook ===
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    webhook_url = f"{RENDER_EXTERNAL_URL}/webhook"
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    print(f"üîó Webhook URL: {webhook_url}")
    
    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        webhook_url=webhook_url
    )
